{"ast":null,"code":"var _jsxFileName = \"/Users/brunobastos/bruno/projetos-trybe/sd-019-c-project-recipes-app/sd-019-c-project-recipes-app/src/components/ShareAndFav.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ShareIcon from '../images/shareIcon.svg';\nimport WhiteHeartIcon from '../images/whiteHeartIcon.svg';\nimport BlackHeartIcon from '../images/blackHeartIcon.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ShareAndFav(_ref) {\n  _s();\n\n  let {\n    actualFood: food,\n    categoryCard\n  } = _ref;\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [linkCopied, setLinkCopied] = useState(false);\n\n  if (categoryCard === 'food') {\n    const copyToClipboard = async () => {\n      await navigator.clipboard.writeText(`${window.location}`);\n      setLinkCopied(true);\n    };\n\n    const addToFavoriteRecipeState = () => {\n      const {\n        idMeal: id,\n        strCategory: type,\n        strArea: nationality,\n        strCategory: category,\n        strMeal: name,\n        strMealThumb: image\n      } = food[0];\n      const actualState = {\n        id,\n        type,\n        nationality,\n        category,\n        name,\n        image\n      };\n      const recipeList = JSON.parse(localStorage.getItem('favoriteRecipes'));\n      let newList = [];\n\n      if (recipeList) {\n        newList = recipeList.find(item => item.id === actualState.id) ? recipeList.filter(item => item.id !== actualState.id) : [...recipeList, actualState];\n      } else {\n        newList = [actualState];\n      }\n\n      localStorage.setItem('favoriteRecipes', JSON.stringify(newList));\n      setIsFavorite(!isFavorite);\n    };\n  } else {\n    const copyToClipboard = async () => {\n      await navigator.clipboard.writeText(`${window.location}`);\n      setLinkCopied(true);\n    };\n\n    const addToFavoriteRecipeState = () => {\n      const {\n        idDrink: id,\n        strCategory: type,\n        strArea: nationality,\n        strCategory: category,\n        strDrink: name,\n        strDrinkThumb: image\n      } = food[0];\n      const actualState = {\n        id,\n        type,\n        nationality,\n        category,\n        name,\n        image\n      };\n      const recipeList = JSON.parse(localStorage.getItem('favoriteRecipes'));\n      let newList = [];\n\n      if (recipeList) {\n        newList = recipeList.find(item => item.id === actualState.id) ? recipeList.filter(item => item.id !== actualState.id) : [...recipeList, actualState];\n      } else {\n        newList = [actualState];\n      }\n\n      localStorage.setItem('favoriteRecipes', JSON.stringify(newList));\n      setIsFavorite(!isFavorite);\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      \"data-testid\": \"recipe-category\",\n      children: food[0].strCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), linkCopied ? 'Link copied!' : /*#__PURE__*/_jsxDEV(\"input\", {\n      onClick: copyToClipboard,\n      \"data-testid\": \"share-btn\",\n      type: \"image\",\n      src: ShareIcon,\n      alt: \"\\xEDcone de compartilhamento\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onClick: addToFavoriteRecipeState,\n      \"data-testid\": \"favorite-btn\",\n      type: \"image\",\n      src: isFavorite ? BlackHeartIcon : WhiteHeartIcon,\n      alt: \"\\xEDcone de cora\\xE7\\xE3o para favoritar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ShareAndFav, \"E1xfY4WWEvp7miGe17pYgk2DWts=\");\n\n_c = ShareAndFav;\nexport default ShareAndFav;\nShareAndFav.propTypes = {\n  food: PropTypes.string\n}.isRequired;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShareAndFav\");","map":{"version":3,"sources":["/Users/brunobastos/bruno/projetos-trybe/sd-019-c-project-recipes-app/sd-019-c-project-recipes-app/src/components/ShareAndFav.jsx"],"names":["React","useState","PropTypes","ShareIcon","WhiteHeartIcon","BlackHeartIcon","ShareAndFav","actualFood","food","categoryCard","isFavorite","setIsFavorite","linkCopied","setLinkCopied","copyToClipboard","navigator","clipboard","writeText","window","location","addToFavoriteRecipeState","idMeal","id","strCategory","type","strArea","nationality","category","strMeal","name","strMealThumb","image","actualState","recipeList","JSON","parse","localStorage","getItem","newList","find","item","filter","setItem","stringify","idDrink","strDrink","strDrinkThumb","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ShareIcon from '../images/shareIcon.svg';\nimport WhiteHeartIcon from '../images/whiteHeartIcon.svg';\nimport BlackHeartIcon from '../images/blackHeartIcon.svg';\n\nfunction ShareAndFav({ actualFood: food, categoryCard }) {\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [linkCopied, setLinkCopied] = useState(false);\n\n  if (categoryCard === 'food') {\n    const copyToClipboard = async () => {\n      await navigator.clipboard.writeText(`${window.location}`);\n      setLinkCopied(true);\n    };\n    const addToFavoriteRecipeState = () => {\n      const { idMeal: id,\n        strCategory: type,\n        strArea: nationality,\n        strCategory: category,\n        strMeal: name, strMealThumb: image } = food[0];\n      const actualState = { id, type, nationality, category, name, image };\n      const recipeList = JSON.parse(localStorage.getItem('favoriteRecipes'));\n      let newList = [];\n      if (recipeList) {\n        newList = recipeList.find((item) => item.id === actualState.id)\n          ? recipeList.filter((item) => item.id !== actualState.id)\n          : [...recipeList, actualState];\n      } else {\n        newList = [actualState];\n      }\n      localStorage.setItem('favoriteRecipes', JSON.stringify(newList));\n\n      setIsFavorite(!isFavorite);\n    };\n  } else {\n    const copyToClipboard = async () => {\n      await navigator.clipboard.writeText(`${window.location}`);\n      setLinkCopied(true);\n    };\n    const addToFavoriteRecipeState = () => {\n      const { idDrink: id,\n        strCategory: type,\n        strArea: nationality,\n        strCategory: category,\n        strDrink: name, strDrinkThumb: image } = food[0];\n      const actualState = { id, type, nationality, category, name, image };\n      const recipeList = JSON.parse(localStorage.getItem('favoriteRecipes'));\n      let newList = [];\n      if (recipeList) {\n        newList = recipeList.find((item) => item.id === actualState.id)\n          ? recipeList.filter((item) => item.id !== actualState.id)\n          : [...recipeList, actualState];\n      } else {\n        newList = [actualState];\n      }\n      localStorage.setItem('favoriteRecipes', JSON.stringify(newList));\n\n      setIsFavorite(!isFavorite);\n    };\n  }\n\n  return (\n    <div>\n      <p data-testid=\"recipe-category\">{food[0].strCategory}</p>\n      {linkCopied ? 'Link copied!'\n        : (\n          <input\n            onClick={ copyToClipboard }\n            data-testid=\"share-btn\"\n            type=\"image\"\n            src={ ShareIcon }\n            alt=\"ícone de compartilhamento\"\n          />)}\n      <input\n        onClick={ addToFavoriteRecipeState }\n        data-testid=\"favorite-btn\"\n        type=\"image\"\n        src={ isFavorite ? BlackHeartIcon : WhiteHeartIcon }\n        alt=\"ícone de coração para favoritar\"\n      />\n    </div>\n  );\n}\n\nexport default ShareAndFav;\n\nShareAndFav.propTypes = {\n  food: PropTypes.string,\n}.isRequired;\n"]},"metadata":{},"sourceType":"module"}